OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:15:39.456-05:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-2314c3f.4sv0zjj54ya6ypv7fr7jj1vy8', '3' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move the remaining from the smaller deck to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[\r\t\t\t"Player 1 runs out of cards during war"\r\t\t\t((p1 size) < (p2 size)) ifTrue:[\r\t\t\t\t1 to: (p1 size) do: [:a | warchest add: p1 first; add: p2 first. p1 removeFirst].\r\t\t\t\t\r\t\t\t\t"Show that player 1 lost"\r\t\t\t\tp1First := -1\r\t\t\t\t].\r\t\t\twarchest addAll: p1. \r\t\t\twarchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll. ]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 18:08',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move the remaining from the smaller deck to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[\r\t\t\t"Player 1 runs out of cards during war"\r\t\t\t((p1 size) < (p2 size)) ifTrue:[\r\t\t\t\t1 to: (p1 size) do: [:a | warchest add: p1 first; add: p2 first. p1 removeFirst. p2 removeFirst].\r\t\t\t\tTranscript show: \'Player 1 short\';cr.\r\t\t\t\tp1 removeAll.\r\t\t\t\t^warchest\r\t\t\t\t].\r\t\t\t"Player 1 runs out of cards during war"\r\t\t\t((p1 size) > (p2 size)) ifTrue:[\r\t\t\t\tTranscript show: \'Player 2 short\';cr.\r\t\t\t\tp2 removeAll.\r\t\t\t\t^warchest\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 18:15',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:18:50.65-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move the remaining from the smaller deck to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[\r\t\t\t"Player 1 runs out of cards during war"\r\t\t\t((p1 size) < (p2 size)) ifTrue:[\r\t\t\t\t1 to: (p1 size) do: [:a | warchest add: p1 first; add: p2 first. p1 removeFirst. p2 removeFirst].\r\t\t\t\tTranscript show: \'Player 1 short\';cr.\r\t\t\t\tp1 removeAll.\r\t\t\t\t^warchest\r\t\t\t\t].\r\t\t\t"Player 1 runs out of cards during war"\r\t\t\t((p1 size) > (p2 size)) ifTrue:[\r\t\t\t\tTranscript show: \'Player 2 short\';cr.\r\t\t\t\tp2 removeAll.\r\t\t\t\t^warchest\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 18:15',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move the remaining from the smaller deck to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[\r\t\t\t"Player 1 runs out of cards during war"\r\t\t\t((p1 size) < (p2 size)) ifTrue:[\r\t\t\t\tTranscript show: \'Player 1 short\';cr.\r\t\t\t\tp1 removeAll.\r\t\t\t\t^warchest\r\t\t\t\t].\r\t\t\t"Player 1 runs out of cards during war"\r\t\t\t((p1 size) > (p2 size)) ifTrue:[\r\t\t\t\tTranscript show: \'Player 2 short\';cr.\r\t\t\t\tp2 removeAll.\r\t\t\t\t^warchest\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 18:18',			#package : #Assignment		}	}}