OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:23:51.31-05:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-2314c3f.a8mqcblvf7unmfqnll5086j68', '31' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move everything to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll. p1First := 14]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 11:06',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move everything to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll. p1First := -1]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 14:23',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:34:32.155-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\tTranscript show: p1First;cr.\r\t\tTranscript show: p2First;cr;cr.\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/23/2023 11:06',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t\tTranscript show: playPlayer1 \r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:34',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:34:41.78-05:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t\tTranscript show: playPlayer1 \r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:34',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t\tTranscript show: playPlayer1;cr.\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:34',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:36:52.075-05:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t\tTranscript show: playPlayer1;cr.\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:34',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:36',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:40:20.827-05:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:36',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:40',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:42:38.131-05:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:40',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer2.\rplayPlayer2 := self getPlayer1.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:42',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:47:42.955-05:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer2.\rplayPlayer2 := self getPlayer1.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:42',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:47',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:48:26.301-05:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:47',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:48',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T14:48:54.408-05:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:48',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:48',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T16:54:40.504-05:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 14:48',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 16:54',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:00:15.825-05:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 16:54',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p1First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:00',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:00:27.387-05:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p1First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:00',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p1First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:00',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:00:39.601-05:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p1First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:00',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p1First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:00',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:02:09.942-05:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p1First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:00',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:02',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:02:26.457-05:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:02',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:02',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:13:15.496-05:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:13:42.799-05:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:02',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:13',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:13:45.328-05:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:14:01.369-05:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:13',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:14',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:35:32.312-05:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer1;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:14',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:35',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:36:06.782-05:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\tTranscript show: playPlayer2;cr.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:35',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\rTranscript show: playPlayer2;cr.\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:36',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:37:16.423-05:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\rTranscript show: playPlayer2;cr.\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:36',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\rTranscript show: playPlayer1;cr.\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:37',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:37:33.525-05:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\rTranscript show: playPlayer1;cr.\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:37',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\rTranscript show: playPlayer2;cr.\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:37',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:41:08.473-05:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:44:32.606-05:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move everything to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll. p1First := -1]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 14:23',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move the remaining from the smaller deck to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[\r\t\t\t((p1 size) < (p2 size)) ifTrue:[warchest addAll: p1; add: p2First. p1First := -1. p1 removeAll]. \r\t\t\t((p1 size) > (p2 size)) ifTrue:[warchest addAll: p2; add: p1First. p2First := -1. p2 removeAll]. \r\t\t\t ]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 17:44',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:44:56.185-05:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move the remaining from the smaller deck to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[\r\t\t\t((p1 size) < (p2 size)) ifTrue:[warchest addAll: p1; add: p2First. p1First := -1. p1 removeAll]. \r\t\t\t((p1 size) > (p2 size)) ifTrue:[warchest addAll: p2; add: p1First. p2First := -1. p2 removeAll]. \r\t\t\t ]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 17:44',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\t"Check to see if one of the players will have an empty hand during war"\r\t\t"If so move the remaining from the smaller deck to the warchest"\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[\r\t\t\t((p1 size) < (p2 size)) ifTrue:[warchest addAll: p1; add: p2First. \r\t\t\t\tp1First := -1. p1 removeAll]. \r\t\t\t((p1 size) > (p2 size)) ifTrue:[warchest addAll: p2; add: p1First. \r\t\t\t\tp2First := -1. p2 removeAll]. \r\t\t\t ]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/24/2023 17:44',			#package : #Assignment		}	}}