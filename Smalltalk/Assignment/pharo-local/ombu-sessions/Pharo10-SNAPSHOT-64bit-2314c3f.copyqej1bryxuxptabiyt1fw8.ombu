OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T00:14:32.86-05:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-2314c3f.2n4iedrw92hyiplst0j3a92k0', '79' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\t1 to: ((warchest size)/2) do: [:a | playPlayer1 removeFirst. playPlayer2 removeFirst].\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\t1 to: ((warchest size)/2) do: [:a | playPlayer1 removeFirst. playPlayer2 removeFirst].\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/22/2023 21:39',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t((p1First > p2First) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\r\r^winner asArray',			#stamp : 'Anonymous 2/23/2023 00:14',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T00:15:35.462-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:17:03.061-05:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:17:06.851-05:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"changes sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[p1First == p2First] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\twarchest add: (p1 first); add: (p2 first).\r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t"Assign to be the third card card comparison"\r\t\tp1First := p1 first.\r\t\tp2First := p2 first.\r\t].\r\r"Add the last 2 cards to the warchest and remove the last two cards from the deck"\rwarchest add: (p1First); add: (p2First).\rp1 removeFirst.\rp2 removeFirst.\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r(p1First > p2First) ifTrue: [warchest addLast: $O] ifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/22/2023 21:41',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest break|\r\rp1First := p1 first.\rp2First := p2 first.\rbreak := 1.\r\rwarchest := SortedCollection new.\r\r"changes sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First) & (break == 1)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[break = 0] \r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t].\r\t].\r\r"Add the last 2 cards to the warchest and remove the last two cards from the deck"\rwarchest add: (p1First); add: (p2First).\rp1 removeFirst.\rp2 removeFirst.\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r(p1First > p2First) ifTrue: [warchest addLast: $O] ifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:17',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:22:46.546-05:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest break|\r\rp1First := p1 first.\rp2First := p2 first.\rbreak := 1.\r\rwarchest := SortedCollection new.\r\r"changes sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First) & (break == 1)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[break = 0] \r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t].\r\t].\r\r"Add the last 2 cards to the warchest and remove the last two cards from the deck"\rwarchest add: (p1First); add: (p2First).\rp1 removeFirst.\rp2 removeFirst.\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r(p1First > p2First) ifTrue: [warchest addLast: $O] ifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:17',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r',			#stamp : 'Anonymous 2/23/2023 08:22',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:36:11.55-05:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:44:54.881-05:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r',			#stamp : 'Anonymous 2/23/2023 08:22',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] ifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:44',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:44:58.448-05:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:47:05.234-05:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:47:45.534-05:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] ifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:44',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:47',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:52:09.923-05:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:47',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) > 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:52',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:52:41.173-05:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) > 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:52',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:52',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:53:08.816-05:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:52',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: \'Here\'.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:53',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:54:01.678-05:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: \'Here\'.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:53',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t].\r\t\tTranscript show: \'Here\'.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:54',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:54:16.164-05:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t].\r\t\tTranscript show: \'Here\'.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:54',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: \'Here\'.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:54',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T08:54:57.382-05:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: \'Here\'.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:54',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\rTranscript show: \'Here\'.\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:54',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:06:53.352-05:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\rTranscript show: \'Here\'.\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 08:54',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:06',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:10:12.665-05:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest |\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:06',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: counter.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:10',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:10:18.478-05:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: counter.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:10',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: counter;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:10',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:13:55.227-05:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 2) | ((p2 size) < 2)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: counter;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:10',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: counter;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:13',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:14:22.551-05:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: counter;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:13',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: p1;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:14',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:15:09.332-05:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: p1;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:14',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: p1;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:15',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:15:39.756-05:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t\tTranscript show: p1;cr.\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:15',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[Transcript show: \'Here\'.warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:15',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:15:59.004-05:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[Transcript show: \'Here\'.warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:15',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll. Transcript show: \'Here\'.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:15',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:16:31.999-05:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest counter|\r\rp1First := p1 first.\rp2First := p2 first.\rcounter := 0.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\tcounter := counter + 1.\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll. Transcript show: \'Here\'.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\r\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:15',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\rTranscript show: \'Here\'.\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:16',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:17:27.145-05:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\r\t\twarchest add: p1First; add: p2First. \r\t\tp1 removeFirst.\r\t\tp2 removeFirst.\r\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\rTranscript show: \'Here\'.\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:16',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r\r| p1First p2First warchest|\r\rp1First := p1 first.\rp2First := p2 first.\r\rwarchest := SortedCollection new.\r\r"change sorted collection sort from greatest to least"\rwarchest sortBlock:[:a :b | a >= b].\r\r[(p1First == p2First)] whileTrue:[\t\t\r\t\t(((p1 size) < 3) | ((p2 size) < 3)) ifTrue:[warchest addAll: p1. warchest addAll: p2. \r\t\t\tp1 removeAll. p2 removeAll.]\r\t\tifFalse:[\r\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Take face down cards, insert them into the warchest and remove them from the decks"\r\t\t\t\twarchest add: (p1 first); add: (p2 first).\r\t\t\t\tp1 removeFirst.\r\t\t\t\tp2 removeFirst.\r\t\t\t\t\r\t\t\t\t"Assign to be the third card card comparison"\r\t\t\t\tp1First := p1 first.\r\t\t\t\tp2First := p2 first.\r\t\t\t\t\r\t\t\t\t(p1First ~= p2First) ifTrue:[\r\t\t\t\t\t\twarchest add: p1First; add: p2First. \r\t\t\t\t\t\tp1 removeFirst.\r\t\t\t\t\t\tp2 removeFirst.\r\t\t\t\t\t] \r\t\t\t].\r\t].\rTranscript show: \'Here\'.\r"convert to order collection for ease of manipulation" \rwarchest := warchest asOrderedCollection.\r\r"After war ends make sure to move all 1s if they exist to the front"\r[(warchest last) == 1] whileTrue:[\r\twarchest addFirst: 1; removeLast\r].\r\r"After war ends add the bigger value to the warchest and add a character to determine who won"\r"$O for player1, $T for player2"\r((p1First > p2First) & ((p1 size) >= 2)) ifTrue: [warchest addLast: $O] \r\tifFalse: [warchest addLast: $T].\r\r^warchest',			#stamp : 'Anonymous 2/23/2023 09:17',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-23T09:17:35.745-05:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}