OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:33:24.53-05:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-2314c3f.4t3kg4teawebg1xv32kkdcbda', '8370' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Assignment,		#affectedPackageName : #Assignment	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:33:24.533-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Object subclass: #War\r\tinstanceVariableNames: \'deck\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment\'',				#traitCompositionSource : '{}',				#superclassName : 'Object'			},			#name : #War,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #deck,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'War class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'War class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #War,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Assignment,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:35:45.294-05:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestAssignment\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment\'',				#traitCompositionSource : '{}',				#superclassName : 'PackageManifest'			},			#name : #ManifestAssignment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestAssignment class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestAssignment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestAssignment,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Assignment,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:35:45.298-05:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Assignment-Manifest,		#affectedPackageName : #Assignment	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:35:45.304-05:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #Assignment,		#newCategory : #Assignment-Manifest,		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestAssignment\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment-Manifest\'',				#traitCompositionSource : '{}',				#superclassName : 'PackageManifest'			},			#name : #ManifestAssignment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestAssignment class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestAssignment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestAssignment,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Assignment-Manifest,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:35:45.314-05:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestAssignment\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment-Manifest\'',				#traitCompositionSource : '{}',				#superclassName : 'PackageManifest'			},			#name : #ManifestAssignment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestAssignment class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestAssignment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestAssignment,					#isMetaSide : false				},				#parent : @7,				#content : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Assignment-Manifest,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#oldStamp : '',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:35:57.363-05:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'PackageManifest subclass: #ManifestAssignment\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment-Manifest\'',				#traitCompositionSource : '{}',				#superclassName : 'PackageManifest'			},			#name : #ManifestAssignment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'ManifestAssignment class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'ManifestAssignment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ManifestAssignment,					#isMetaSide : false				},				#parent : @7,				#content : 'This package contains the Smalltalk assignment for CPS506.',				#stamp : 'Anonymous 2/21/2023 09:35'			},			#classVariables : OrderedCollection [ ],			#category : #Assignment-Manifest,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser',		#newComment : 'This package contains the Smalltalk assignment for CPS506.',		#oldStamp : '<historical>',		#newStamp : 'Anonymous 2/21/2023 09:35'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:39:06.31-05:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Object subclass: #War\r\tinstanceVariableNames: \'deck\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment\'',				#traitCompositionSource : '{}',				#superclassName : 'Object'			},			#name : #War,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #deck,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'War class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'War class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #War,					#isMetaSide : false				},				#parent : @7,				#content : 'This represents the War class for the game War.\r\rThis class is responsible for running a game of war. This includes taking in a deck of cards, distrabution of cards and implementing all the necessary rules of the game.',				#stamp : 'Anonymous 2/21/2023 09:39'			},			#classVariables : OrderedCollection [ ],			#category : #Assignment,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This represents the War class for the game War.\r\rThis class is responsible for running a game of war. This includes taking in a deck of cards, distrabution of cards and implementing all the necessary rules of the game.',		#oldStamp : '',		#newStamp : 'Anonymous 2/21/2023 09:39'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:50:03.97-05:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #deal,			#protocol : #'as yet unclassified',			#sourceCode : 'deal\r\r^deck',			#stamp : 'Anonymous 2/21/2023 09:50',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T09:54:54.89-05:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #deal,			#protocol : #'as yet unclassified',			#sourceCode : 'deal\r\r^deck',			#stamp : 'Anonymous 2/21/2023 09:50',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T10:04:36.007-05:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: deck\r\r| obj |\r\robj := self new.\robj setdeck: deck.\r\r^deck',			#stamp : 'Anonymous 2/21/2023 10:04',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T10:04:53.767-05:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #setdeck,			#protocol : #'as yet unclassified',			#sourceCode : 'setdeck',			#stamp : 'Anonymous 2/21/2023 10:04',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T10:05:14.86-05:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #setDeck,			#protocol : #'as yet unclassified',			#sourceCode : 'setDeck\r',			#stamp : 'Anonymous 2/21/2023 10:05',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T10:05:19.566-05:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #setdeck,			#protocol : #'as yet unclassified',			#sourceCode : 'setdeck',			#stamp : 'Anonymous 2/21/2023 10:04',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T10:05:29.048-05:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: deck\r\r| obj |\r\robj := self new.\robj setdeck: deck.\r\r^deck',			#stamp : 'Anonymous 2/21/2023 10:04',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: deck\r\r| obj |\r\robj := self new.\robj setDeck: deck.\r\r^deck',			#stamp : 'Anonymous 2/21/2023 10:05',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T10:07:32.135-05:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'setDeck:',			#protocol : #'as yet unclassified',			#sourceCode : 'setDeck: gameDeck\rdeck:= gameDeck.\r',			#stamp : 'Anonymous 2/21/2023 10:07',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T10:07:41.162-05:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #setDeck,			#protocol : #'as yet unclassified',			#sourceCode : 'setDeck\r',			#stamp : 'Anonymous 2/21/2023 10:05',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:09:54.032-05:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Object subclass: #War\r\tinstanceVariableNames: \'deck\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment\'',				#traitCompositionSource : '{}',				#superclassName : 'Object'			},			#name : #War,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #deck,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'War class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'War class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #War,					#isMetaSide : false				},				#parent : @7,				#content : 'This represents the War class for the game War.\r\rThis class is responsible for running a game of war. This includes taking in a deck of cards, distrabution of cards and implementing all the necessary rules of the game.',				#stamp : 'Anonymous 2/21/2023 09:39'			},			#classVariables : OrderedCollection [ ],			#category : #Assignment,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Object subclass: #War\r\tinstanceVariableNames: \'player_1 player_2\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment\'',				#traitCompositionSource : '{}',				#superclassName : 'Object'			},			#name : #War,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #player_1,					#parent : @23				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #player_2,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'War class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'War class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #War,					#isMetaSide : false				},				#parent : @23,				#content : 'This represents the War class for the game War.\r\rThis class is responsible for running a game of war. This includes taking in a deck of cards, distrabution of cards and implementing all the necessary rules of the game.',				#stamp : 'Anonymous 2/21/2023 09:39'			},			#classVariables : OrderedCollection [ ],			#category : #Assignment,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:10:18.439-05:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Object subclass: #War\r\tinstanceVariableNames: \'player_1 player_2\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment\'',				#traitCompositionSource : '{}',				#superclassName : 'Object'			},			#name : #War,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #player_1,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #player_2,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'War class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'War class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #War,					#isMetaSide : false				},				#parent : @7,				#content : 'This represents the War class for the game War.\r\rThis class is responsible for running a game of war. This includes taking in a deck of cards, distrabution of cards and implementing all the necessary rules of the game.',				#stamp : 'Anonymous 2/21/2023 09:39'			},			#classVariables : OrderedCollection [ ],			#category : #Assignment,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Object subclass: #War\r\tinstanceVariableNames: \'player1 player2\'\r\tclassVariableNames: \'\'\r\tpackage: \'Assignment\'',				#traitCompositionSource : '{}',				#superclassName : 'Object'			},			#name : #War,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #player1,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #War,						#isMetaSide : false					},					#name : #player2,					#parent : @25				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'War class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'War class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @25			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #War,					#isMetaSide : false				},				#parent : @25,				#content : 'This represents the War class for the game War.\r\rThis class is responsible for running a game of war. This includes taking in a deck of cards, distrabution of cards and implementing all the necessary rules of the game.',				#stamp : 'Anonymous 2/21/2023 09:39'			},			#classVariables : OrderedCollection [ ],			#category : #Assignment,			#package : #Assignment,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:10:47.973-05:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'setPlayer1:',			#protocol : #'as yet unclassified',			#sourceCode : 'setPlayer1: arr\rplayer1 := arr.',			#stamp : 'Anonymous 2/21/2023 12:10',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:10:54.04-05:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'setDeck:',			#protocol : #'as yet unclassified',			#sourceCode : 'setDeck: gameDeck\rdeck:= gameDeck.\r',			#stamp : 'Anonymous 2/21/2023 10:07',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:11:48.125-05:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: deck\r\r| obj |\r\robj := self new.\robj setDeck: deck.\r\r^deck',			#stamp : 'Anonymous 2/21/2023 10:05',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\robj setPlayer1: deck1.\r\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:11',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:12:32.028-05:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'setPlayer2:',			#protocol : #'as yet unclassified',			#sourceCode : 'setPlayer2: arr\rplayer2 := arr.',			#stamp : 'Anonymous 2/21/2023 12:12',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:30:32.089-05:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\robj setPlayer1: deck1.\r\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:11',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r1 to: (arr size) by: \t2 do: [:a | deck1 addLast: (arr at: a). deck2 addLast: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:30',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:34:16.146-05:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r1 to: (arr size) by: \t2 do: [:a | deck1 addLast: (arr at: a). deck2 addLast: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:30',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stacking them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:34',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T12:36:58.239-05:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stacking them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:34',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stack them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:36',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T14:35:10.497-05:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stack them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 12:36',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stack them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\robj play.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 14:35',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T14:35:28.815-05:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play ',			#stamp : 'Anonymous 2/21/2023 14:35',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T14:37:35.536-05:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stack them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\robj play.\r\r^arr',			#stamp : 'Anonymous 2/21/2023 14:35',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stack them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^obj play.',			#stamp : 'Anonymous 2/21/2023 14:37',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T14:52:14.298-05:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stack them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r^obj play.',			#stamp : 'Anonymous 2/21/2023 14:37',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: arr\r\r| obj deck1 deck2|\r\robj := self new.\rdeck1 := OrderedCollection new.\rdeck2 := OrderedCollection new.\r\r"deals deck alternating between players and stack them"\r1 to: (arr size) by: \t2 do: [:a | deck1 addFirst: (arr at: a). deck2 addFirst: (arr at: (a+1))].\r\robj setPlayer1: deck1.\robj setPlayer2: deck2.\r\r"return winning deck after playing"\r^obj play.',			#stamp : 'Anonymous 2/21/2023 14:52',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T14:53:06.756-05:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #getPlayer1,			#protocol : #'as yet unclassified',			#sourceCode : 'getPlayer1\r^player1.\r',			#stamp : 'Anonymous 2/21/2023 14:53',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T14:53:25.233-05:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #getPlayer2,			#protocol : #'as yet unclassified',			#sourceCode : 'getPlayer2\r^player2.\r',			#stamp : 'Anonymous 2/21/2023 14:53',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T15:02:10.95-05:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\asher\\Documents\\Pharo\\images\\Assignment\\Assignment.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T16:14:09.393-05:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #'war:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'war: p1 and: p2\r',			#stamp : 'Anonymous 2/21/2023 16:14',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T16:14:45.677-05:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play ',			#stamp : 'Anonymous 2/21/2023 14:35',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 temp p1First p2First|\r\rplayPlayer1:= self getPlayer1.\rplayPlayer2:= self getPlayer2.\rtemp := OrderedCollection new.\r\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue:[\r\ttemp removeAll: temp.\r\tp1First := playPlayer1 first.\r\tp2First := playPlayer2 first.\r\t\r\t(p1First == p2First) ifTrue:[self war: p1First and: p2First ] ifFalse: [].\r\t\r\t((p1First  > p2First) & (p2First  ~= 1)) ifTrue: [ playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst] \r\tifFalse: [ ].\r\t].\r',			#stamp : 'Anonymous 2/21/2023 16:14',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T16:42:40.766-05:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 temp p1First p2First|\r\rplayPlayer1:= self getPlayer1.\rplayPlayer2:= self getPlayer2.\rtemp := OrderedCollection new.\r\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue:[\r\ttemp removeAll: temp.\r\tp1First := playPlayer1 first.\r\tp2First := playPlayer2 first.\r\t\r\t(p1First == p2First) ifTrue:[self war: p1First and: p2First ] ifFalse: [].\r\t\r\t((p1First  > p2First) & (p2First  ~= 1)) ifTrue: [ playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst] \r\tifFalse: [ ].\r\t].\r',			#stamp : 'Anonymous 2/21/2023 16:14',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 temp p1First p2First|\r\rplayPlayer1:= self getPlayer1.\rplayPlayer2:= self getPlayer2.\rtemp := OrderedCollection new.\r\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue:[\r\ttemp removeAll: temp.\r\tp1First := playPlayer1 first.\r\tp2First := playPlayer2 first.\r\t\r\t(p1First == p2First) ifTrue:[self war: playPlayer1 and: playPlayer2 ] \r\tifFalse: [].\r\t\r\t((p1First  > p2First) & (p2First  ~= 1)) ifTrue: [ playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst] \r\tifFalse: [ ].\r\t].\r',			#stamp : 'Anonymous 2/21/2023 16:42',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-21T19:54:36.959-05:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 temp p1First p2First|\r\rplayPlayer1:= self getPlayer1.\rplayPlayer2:= self getPlayer2.\rtemp := OrderedCollection new.\r\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue:[\r\ttemp removeAll: temp.\r\tp1First := playPlayer1 first.\r\tp2First := playPlayer2 first.\r\t\r\t(p1First == p2First) ifTrue:[self war: playPlayer1 and: playPlayer2 ] \r\tifFalse: [].\r\t\r\t((p1First  > p2First) & (p2First  ~= 1)) ifTrue: [ playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst] \r\tifFalse: [ ].\r\t].\r',			#stamp : 'Anonymous 2/21/2023 16:42',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 warchest p1First p2First|\r\rplayPlayer1:= self getPlayer1.\rplayPlayer2:= self getPlayer2.\rwarchest := SortedCollection new.\r\r\r\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue:[\r\twarchest removeAll: warchest.\r\tp1First := playPlayer1 first.\r\tp2First := playPlayer2 first.\r\t\r\t(p1First == p2First) ifTrue:[self war: playPlayer1 and: playPlayer2 ] \r\tifFalse: [\r\t\t((p1First == 1) | (p1First  > p2First)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst]\r\t\tifFalse:[\r\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst\r\t\t\t].\r\t\t].\r\t].\r\r(playPlayer1 isEmpty) ifTrue:[^playPlayer2] ifFalse:[^playPlayer1].\r',			#stamp : 'Anonymous 2/21/2023 19:54',			#package : #Assignment		}	}}