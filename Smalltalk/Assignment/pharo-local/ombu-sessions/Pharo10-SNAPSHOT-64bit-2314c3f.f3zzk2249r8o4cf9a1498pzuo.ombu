OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:50:06.969-05:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-2314c3f.58ynfodrejppu41j0ghexqrgo', '1' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r"play the game until one of the decks is empty"\r[ (playPlayer1 isNotEmpty) & (playPlayer2 isNotEmpty) ] whileTrue: [\r\t\tp1First := playPlayer1 first.\r\t\tp2First := playPlayer2 first.\r\t\t\r\t\twarchest removeAll: warchest.\r\t\t\r\t\t"go into war if two cards match each other"\r\t\t(p1First == p2First) ifTrue:[\r\t\t\twarchest:= self war: playPlayer1 and: playPlayer2.\r\t\t\t\r\t\t\t"Add warchest to player that won and remove cards from loser"\r\t\t\t((warchest last ) == $O) ifTrue:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer1 addAll: warchest.\r\t\t\t\t]\r\t\t\tifFalse:[\r\t\t\t\twarchest removeLast.\r\t\t\t\tplayPlayer2 addAll: warchest.\r\t\t\t\t].\r\t\t\t]\r\t\t\r\t\tifFalse:[\r\t\t\t"Make sure 1s are the highest number"\r\t\t\t(((p1First > p2First) & (p2First ~= 1)) | (p1First == 1)) ifTrue:[playPlayer1 addLast: p1First. playPlayer1 addLast: p2First. playPlayer1 removeFirst. playPlayer2 removeFirst]\r\t\t\t\tifFalse:[\r\t\t\t\t\tplayPlayer2 addLast: p2First. playPlayer2 addLast: p1First. playPlayer2 removeFirst. playPlayer1 removeFirst\r\t\t\t\t]\r\t\t\t].\r\t].\r\r"Determine who won"\r(playPlayer1 isEmpty) ifTrue:[winner := playPlayer2] ifFalse:[winner := playPlayer1].\rTranscript show: playPlayer2;cr.\r^winner asArray',			#stamp : 'Anonymous 2/24/2023 17:37',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #War,				#isMetaSide : false			},			#name : #play,			#protocol : #'as yet unclassified',			#sourceCode : 'play \r\r| playPlayer1 playPlayer2 p1First p2First winner warchest|\r\rplayPlayer1 := self getPlayer1.\rplayPlayer2 := self getPlayer2.\rwarchest := OrderedCollection new.\r\r\r^playPlayer1 asArray',			#stamp : 'Anonymous 2/24/2023 18:50',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:50:15.136-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestAssignment class',				#isMetaSide : true			},			#name : #ruleReTemporaryNeitherReadNorWrittenRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleReTemporaryNeitherReadNorWrittenRuleV1FalsePositive\r\t^ #()',			#stamp : 'Anonymous 2/24/2023 18:50',			#package : #Assignment		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:50:16.229-05:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestAssignment class',				#isMetaSide : true			},			#name : #ruleReTemporaryNeitherReadNorWrittenRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleReTemporaryNeitherReadNorWrittenRuleV1FalsePositive\r\t^ #()',			#stamp : 'Anonymous 2/24/2023 18:50',			#package : #Assignment		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ManifestAssignment class',				#isMetaSide : true			},			#name : #ruleReTemporaryNeitherReadNorWrittenRuleV1FalsePositive,			#protocol : #code-critics,			#sourceCode : 'ruleReTemporaryNeitherReadNorWrittenRuleV1FalsePositive\r\t^ #(#(#(#RGMethodDefinition #(#War #play #false)) #\'2023-02-24T18:50:15.137-05:00\') )',			#stamp : 'Anonymous 2/24/2023 18:50',			#package : #Assignment		}	}}